//      const match = await bcrypt.compare(inputPassword, user.hash);





// On importe les outils fournis par Next.js pour gÃ©rer les requÃªtes/rÃ©ponses HTTP
import { NextRequest, NextResponse } from "next/server"

// =========================================
// === Fonction qui sâ€™exÃ©cute cÃ´tÃ© serveur ===
// =========================================
// Elle sera appelÃ©e automatiquement Ã  chaque requÃªte POST sur /api/connexion
export async function POST(req: NextRequest) {
  // ğŸ”¹ On lit le corps (body) de la requÃªte (format JSON)
  const { pseudo } = await req.json()

  // ğŸ”¹ On prÃ©pare une rÃ©ponse JSON Ã  renvoyer
  // Ici, on renvoie juste un message, mais en vrai tu pourrais :
  //    - vÃ©rifier un mot de passe
  //    - accÃ©der Ã  une base de donnÃ©es
  //    - renvoyer des infos utilisateur
  const response = { message: `Salut ${pseudo}, bienvenue sur le site !` }

  // ğŸ”¹ On renvoie cette rÃ©ponse au client
  return NextResponse.json(response)
}

// ğŸ”¹ Hack TypeScript : certains compilateurs veulent au moins un export par fichier
// Si tu nâ€™Ã©cris pas ce "export {}", TypeScript peut rÃ¢ler
export {}


