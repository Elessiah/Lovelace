"use client" 
// ğŸ‘‰ Obligatoire ici : Ã§a indique Ã  Next.js que ce fichier sâ€™exÃ©cute CÃ”TÃ‰ NAVIGATEUR
// (par dÃ©faut, tout dans /app est cÃ´tÃ© serveur)

import { useState } from "react"
// ğŸ‘‰ On importe useState de React pour stocker et modifier des valeurs Ã  lâ€™intÃ©rieur du composant

// ============================
// === COMPOSANT PRINCIPAL ===
// ============================
export default function Connexion() {
  // ----------------------------
  // ğŸ”¹ DÃ©claration des variables d'Ã©tat (states)
  // ----------------------------
  // "pseudo" : contient la valeur tapÃ©e dans l'input
  // "setPseudo" : permet de modifier cette valeur
  const [pseudo, setPseudo] = useState("")

  // "message" : contiendra la rÃ©ponse envoyÃ©e par le serveur (ex : "Salut Vincent !")
  // "setMessage" : pour la modifier
  const [message, setMessage] = useState("")

  // ----------------------------
  // ğŸ”¹ Fonction qui sâ€™exÃ©cute quand on clique sur "Envoyer"
  // ----------------------------
  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault() 
    // ğŸ”¸ EmpÃªche le comportement par dÃ©faut du formulaire
    //    (sinon la page se rechargerait complÃ¨tement)

    // ğŸ”¹ On envoie une requÃªte HTTP POST vers notre route API "/api/connexion"
    const res = await fetch("/api/connexion", {
      method: "POST", // mÃ©thode HTTP
      headers: {
        "Content-Type": "application/json", // indique quâ€™on envoie du JSON
      },
      body: JSON.stringify({ pseudo }), 
      // ğŸ”¸ On transforme notre objet { pseudo: "Vincent" } en texte JSON
      //    car le corps dâ€™une requÃªte HTTP doit toujours Ãªtre une chaÃ®ne de texte
    })

    // ğŸ”¹ On attend la rÃ©ponse du serveur, puis on la convertit en JSON
    const data = await res.json()

    // ğŸ”¹ On stocke la valeur du message renvoyÃ© dans notre state
    setMessage(data.message)
  }

  // ----------------------------
  // ğŸ”¹ Ce que la page affiche
  // ----------------------------
  return (
    <form onSubmit={handleSubmit}>
      {/* Champ texte liÃ© Ã  la variable pseudo */}
      <input
        type="text"
        value={pseudo}                        // valeur actuelle du champ
        onChange={e => setPseudo(e.target.value)} // se met Ã  jour Ã  chaque frappe
        placeholder="Entre ton pseudo"        // texte grisÃ© par dÃ©faut
      />

      {/* Bouton pour valider le formulaire */}
      <button type="submit">Envoyer</button>

      {/* Si on a reÃ§u un message du serveur, on lâ€™affiche */}
      {message && <p>{message}</p>}
    </form>
  )
}
